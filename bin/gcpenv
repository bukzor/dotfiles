#!/bin/zsh
set -euo pipefail

PS4=$'\n$ '
has() {
  command -v "$1" > /dev/null
}
show() {
  set -x
  "$@"
  { set  +x } 2> /dev/null
}

case $# in
  0)
    show gcloud config configurations list
    exit 0
    ;;
  1)
    if ! gcloud config configurations activate "$@"; then
      show gcloud config configurations create "$@"
      show gcloud config set project "$@"
      show gcloud config set account "$EMAIL"
      cat >&2 <<'EOF'
NOTE: You now have a new, empty gcloud configuration. To populate it:

  gcloud config set project $GCP_PROJECT
  gcloud config set account $EMAIL
  gcloud container clusters list
  gcloud config set compute/region $GCE_REGION
  gcloud config set container/cluster $GKE_CLUSTER
  kubectl config set-context --current --namespace $K8S_NAMESPACE
EOF
      exit 1
    fi
  ;;
  *)
    show gcloud config configurations "$@"
    exit 0
    ;;
esac

eval "$(gcloud config list --format 'get(container)')"

if [[ "${cluster:-}" ]]; then
  # Authenticate with the configured cluster, use it to configure a kubectl
  # context of the same name (as the gcloud configuration), then activate it.
  mkdir -p $HOME/.kube
  export USE_GKE_GCLOUD_AUTH_PLUGIN=True
  gke_location=$(
    gcloud container clusters list \
        --filter="name=\"$cluster\"" \
        --format 'value(location)' \
    ;
  )

  show flock $HOME/.kube/config \
    gcloud container clusters get-credentials --zone="$gke_location" \
      "$cluster"


  gcloud_configuration="$(cat ~/.config/gcloud/active_config)"
  gke_context="$(kubectl config current-context)"

  kubectl config view -o json |
    jq '
      .contexts[]
      | select(.name == "'"$gke_context"'").context
      | to_entries
      | map("--\(.key)=\(.value)")
      | join(" ")
    ' -r |
    xargs -tr kubectl config set-context "$gcloud_configuration"

  show kubectl config use-context "$gcloud_configuration"
fi
