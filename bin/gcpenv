#!/bin/bash
set -euo pipefail
. "$HOME/.sh_lib/minimal.sh"
minimal_init

ACTIVE_CONFIG=~/.config/gcloud/active_config

help() {
  if [[ -e "$ACTIVE_CONFIG" ]]; then
      gcpenv="$(cat "$ACTIVE_CONFIG" || echo '$env')"
      sed "s/\$gcpenv/$gcpenv/g" >&2 <<'EOF'
NOTE: You now have a new, empty gcloud configuration. To populate it:

gcloud config set project $GCP_PROJECT
gcloud config set account "$(git config user.email)"
gcloud container clusters list
gcloud config set compute/region $GCE_REGION
gcloud config set container/cluster $GKE_CLUSTER
gcpenv "$gcpenv"
kubectl config set-context "$gcpenv" --namespace $K8S_NAMESPACE
EOF
    else
      cat >&2 <<'EOF'
usage: gcpenv $new-env-name

Create and manage named groups of default options to gcloud commands.
EOF
  fi
}

case $# in
  0)
    show gcloud config configurations list
    exit 0
    ;;
  1)
    if [[ "$1" =~ ^(help|-h|--help)$ ]]; then
      help
      exit 0
    else
      gcpenv="$1"
    fi
  ;;
  *)
    show gcloud config configurations "$@"
    exit 0
    ;;
esac

if ! gcloud config configurations activate "$gcpenv"; then
  show gcloud config configurations create "$gcpenv"
  show gcloud config set project "$gcpenv"
  show gcloud config set account "$EMAIL"
  cat >&2 <<EOF
NOTE: You now have a new, empty gcloud configuration. To populate it:

EOF
  help
  exit 1
fi

eval "$(gcloud config list --format 'get(container)')"

if [[ "${cluster:-}" ]]; then
  # Authenticate with the configured cluster, use it to configure a kubectl
  # context of the same name (as the gcloud configuration), then activate it.
  mkdir -p "$HOME/.kube"
  export USE_GKE_GCLOUD_AUTH_PLUGIN=True
  gke_location=$(
    gcloud container clusters list \
        --filter="name=\"$cluster\"" \
        --format 'value(location)' \
    ;
  )

  show flock "$HOME/.kube/config" \
    gcloud container clusters get-credentials --zone="$gke_location" \
      "$cluster"


  gke_context="$(kubectl config current-context)"

  kubectl config view -o json |
    jq '
      .contexts[]
      | select(.name == "'"$gke_context"'").context
      | to_entries
      | map("--\(.key)=\(.value)")
      | join(" ")
    ' -r |
    xargs -tr kubectl config set-context "$gcpenv" \
  ;

  show kubectl config use-context "$gcpenv"
fi
