#!/bin/bash
set -eu
# vimmerge: A better vimdiff mergetool for Git
#
# Git does a great job resolving merge conflicts automatically but there are
# times when human intervention is still needed. Git resolves all the conflicts
# that it is able to and finally wraps each conflict it cannot resolve within
# special markers which must be resolved by a human.
#
# The vertical format and lack of syntax highlighting in the plain conflict
# marker layout makes it difficult to spot subtle conflicts such as
# single-character changes and this is where a two-way diff really shines!
# To see this explained using screenshots, see:
# http://vim.wikia.com/wiki/A_better_Vimdiff_Git_mergetool
#
# This script, when used as a Git mergetool, opens each "side" of the conflict
# markers in a two-way vimdiff window. This combines all the awesome of Git's
# automatic merging savvy with the awesome and simplicity of a simple two-way
# diff.
#
# Add this mergetool to your ~/.gitconfig (you can substitute gvim for vim):
#
#   git config --global mergetool.vimmerge.cmd 'vimmerge vim $BASE $LOCAL $REMOTE $MERGED'
#
# The next time you perform a merge with conflicts, invoke this tool with the
# following command.
#
#   git mergetool --tool vimmerge
#
# Of course you can set it as your default mergetool, like so:
#
#   git config --global merge.tool vimmerge

# Other recommended (but entirely optional) settings:
#
#   git config --global mergetool.prompt false
#   git config --global mergetool.keepBackup false
#   git config --global mergetool.vimmerge.trustExitCode true
#
# This tool will open three tabs in Vim that each provide a different way to
# view the conflicts. You can resolve the conflicts in the first tab and save
# and exit the file. This will also mark the conflict as resolved in Git.
#
#   Tab1 is a two-way diff of just the conflicts. Resolve the conflicts here
#   and save the file.
#       +--------------------------------+
#       |    REMOTE     |     MERGED     |
#       +--------------------------------+
#   Tab2 is a two-way diff of the merge base versus the remote branch. This
#   shows what the remote branch was trying to change.
#       +--------------------------------+
#       |     BASE      |     REMOTE     |
#       +--------------------------------+
#   Tab3 is a two-way diff of the merge base versus the *local* branch. This
#   shows what *your* branch was trying to change.
#       +--------------------------------+
#       |     BASE      |      LOCAL     |
#       +--------------------------------+
#
# Workflow:
#
# 1.    Save your changes to the MERGED file (the right window on the first
#       tab; also the only file that isn't read-only).
# 2.    The BASE and REMOTE versions of the file are available in the second
#       and third tabpage if you want to look at them.
# 3.    If you save the MERGED file, those resolutions will be staged for
#       commit.
#
# NOTE: Use :cq to abort the merge and exit Vim with an error code.

if [[ -z $@ || $# -lt 3 || $# -gt 4 ]] ; then
    echo -e "Usage: $0 MINE MERGED THEIRS [BASE]"
    exit 1
fi

MINE="$1"
MERGED="$2"
THEIRS="$3"
BASE="${4:-}"

if [[ "$BASE" ]]; then
  middle=("$BASE")
else
  middle=()
fi

# Fire up vimdiff
vim -R \
  -d "${MINE}" "$MERGED" "${base[@]}" "${THEIRS}" \
  -c ":tabfir |wincmd l |wincmd q |bo sp |b2 |set noro nodiff cursorbind"

# :vim:textwidth=79:
