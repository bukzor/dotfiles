#!/usr/bin/env python3
from sys import argv
from sys import stdout


def ansicode(index):
  if index:
    return index * 40 + 55
  else:
    return 0
    

reset = argv[1:]
if reset:
  # colors 16-231 are a 6x6x6 color cube
  for red in range(6):
    redcode = ansicode(red)
    for green in range(6):
      greencode = ansicode(green)
      for blue in range(6):
        bluecode = ansicode(blue)
        stdout.write("\x1b]4;%d;rgb:%2.2x/%2.2x/%2.2x\x1b\\" % (
          16 + 36*red + 6*green + blue,
          redcode, greencode, bluecode,
        ))

  # colors 232-255 are a grayscale ramp, intentionally leaving out
  # black and white
  for gray in range(24):
    level = gray * 10 + 8
    stdout.write("\x1b]4;%d;rgb:%2.2x/%2.2x/%2.2x\x1b\\",
      232 + gray, level, level, level);

# display the colors

# first the system ones:
print("System colors:")
for color in range(8):
  stdout.write("\x1b[48;5;%sm %2i " % (color, color))

print("\x1b[0m")
for color in range(8, 16):
  stdout.write("\x1b[48;5;%sm %2i " % (color, color))

print("\x1b[0m\n")

# now the color cube
print("Color cube, 6x6x6: (256color)")
for green in range(6):
  for red in range(6):
    for blue in range(6):
      color = 16 + 36*red + 6*green + blue
      stdout.write("\x1b[48;5;%sm%3i" % (color, color))
    stdout.write("\x1b[0m ")
  print();


# now the grayscale ramp
print("Grayscale ramp:")
for color in range(232, 256):
  stdout.write("\x1b[48;5;%sm %3i " % (color, color))
print("\x1b[0m")
