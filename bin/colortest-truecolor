#!/usr/bin/env python3
from sys import argv
from sys import stdout


# display the colors
def white_fg():
  stdout.write("\x1b[1;38;5;231m")
def black_fg():
  stdout.write("\x1b[1;38;5;232m")

def show_color(*color):
  code = ';'.join(str(x) for x in color)
  repr = ''.join(format(x, '02x') for x in color)
  stdout.write("\x1b[48;2;%sm %s " % (code, repr))

def reset(end='\n'):
  stdout.write("\x1b[0m" + end)

def luminance(r, g, b):
  # see: https://www.w3.org/TR/WCAG20-TECHS/G145.html#G145-tests
  if r <= 0.03928:
    r = r/12.92
  else:
    r = ((r+0.055)/1.055) ** 2.4

  if g <= 0.03928:
    g = g/12.92
  else:
    g = ((g+0.055)/1.055) ** 2.4

  if b <= 0.03928:
    b = b/12.92
  else:
    b = ((b+0.055)/1.055) ** 2.4
  return 0.2126 * r + 0.7152 * g + 0.0722 * b

def contrast_ratio(l1, l2):
  # see: https://www.w3.org/TR/WCAG20-TECHS/G145.html#G145-tests
  if l1 < l2:
    l1, l2 = l2, l1
  ratio = (l1 + 0.05) / (l2 + 0.05)
  assert ratio >= 1, ratio
  return ratio

def show_rgb(red, green, blue):
  l = luminance(red/255, green/255, blue/255)
  if contrast_ratio(l, 0.0) > contrast_ratio(1, l):
    black_fg()
  else:
    white_fg()
  show_color(red, green, blue)

def show_cube(*range_args):
  for red in range(6):
    for green in range(*range_args):
      for blue in range(6):
        show_rgb(red * 51, green * 51, blue * 51)
      reset(" ")
    print();
  print()

# now the color cube
print("Color cube, 6x6x6: (24-bit truecolor)")
show_cube(2)
show_cube(2, 4)
show_cube(4, 6)

# now the grayscale ramp
print("Grayscale ramp:")
for color in range(12):
  color *= 11
  show_rgb(color, color, color)
reset()
for color in range(12, 24):
  color *= 11
  show_rgb(color, color, color)
reset()
