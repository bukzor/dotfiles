[tool.black]
line-length = 79
target-version = ['py312']
skip-magic-trailing-comma = true

[tool.isort]
profile = "black"
use_parentheses = true
force_single_line = true
multi_line_output = 3
include_trailing_comma = true
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER']
lines_between_sections = 1
add_imports=[
  "from __future__ import annotations",
]

[tool.coverage.run]
plugins = ["covdefaults"]

[tool.coverage.report]
show_missing = true
fail_under = 100
skip_covered = false
#exclude_lines = ["@pytest.mark.slow_integration"]

[tool.pytest.ini_options]
minversion = "6.0"
markers = []
addopts = "--durations-min=10 --last-failed -s -vv --doctest-modules"
testpaths = ["."]
norecursedirs = [
    "**/__pycache__",
    "**/.*",
    "venv",
    "tmp*",
    "*tmp",
]
python_files = ["*.py"]
python_classes = ["Test", "Describe"]
python_functions = ["test", "it"]


[tool.pyright]
include = ["."]
exclude = [
    "**/__pycache__",
    "**/.*",
    "venv",
    "tmp*",
    "*tmp",
]

pythonPlatform = "Linux"

pythonVersion = "3.12"
extraPaths = [
  "venv/lib/python3.12/site-packages/"
]

typeCheckingMode = "strict"

# don't flag arguments as long as its type is known
reportMissingParameterType = "none"
reportUnknownParameterType = "error"

# turn on all the checks not already enabled by "strict":
reportCallInDefaultInitializer = "error"
reportImplicitStringConcatenation = "error"
reportMissingSuperCall = "error"
reportPropertyTypeMismatch = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = "none"  # too noisy


[tool.mypy]
python_version = "3.12"

files = ["."]
exclude = ["^venv/"]

# Strict mode; enables the following flags: (in mypy 1.7.1)
#     --check-untyped-defs
#     --disallow-any-generics
#     --disallow-incomplete-defs
#     --disallow-subclassing-any
#     --disallow-untyped-calls
#     --disallow-untyped-decorators
#     --disallow-untyped-defs
#     --extra-checks
#     --no-implicit-reexport
#     --strict-equality
#     --warn-redundant-casts
#     --warn-return-any
#     --warn-unused-configs
#     --warn-unused-ignores
strict = true

# disallow Any typing:
disallow_any_unimported = true
# better covered by pyright
# currently this flags attributes used in an `assert instance` typeguard..
disallow_any_expr = false
disallow_any_decorated = true
disallow_any_explicit = true

implicit_reexport = false

warn_no_return = true
warn_unreachable = true

# these are better-covered by pyright:
disallow_untyped_defs = false

[tool.pylsp.plugins.pycodestyle]
enabled = false
[pylsp.plugins.pycodestyle]
enabled = false

[tool.pylsp-mypy]
enabled = true
live_mode = true
