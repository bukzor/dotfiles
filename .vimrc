" automatically install vim-plug, if not found
runtime autoload/plug.vim
if !exists('g:loaded_plug')
  silent !curl -fLo "$HOME"/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" automatically install missing plugins, if needed
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif


call plug#begin()
  " sensible defaults
  Plug 'tpope/vim-sensible'
  " I love this color scheme
  Plug 'morhetz/gruvbox'
  " put docs in the echo area
  Plug 'Shougo/echodoc'
  " null-ls dependency
  Plug 'nvim-lua/plenary.nvim'
  " translate between CLI tools and LSP diagnostics / actions
  " used for black, pylint, isort
  Plug 'jose-elias-alvarez/null-ls.nvim'
  " a collection of LSP configs -- I'm using their pyright config
  Plug 'neovim/nvim-lspconfig'
  " replaced with null-ls:
  """ " async blackening of python files
  """ Plug 'averms/black-nvim', {'do': ':UpdateRemotePlugins'}
  " automatically run formatters
  Plug 'lukas-reineke/lsp-format.nvim'
  " helpful markers and lists of all the information generated by LSPs
  Plug 'folke/trouble.nvim'
  " suggested dependency of 'trouble' ^
  Plug 'kyazdani42/nvim-web-devicons'
  Plug 'folke/lsp-colors.nvim'
call plug#end()

set background=dark
colorscheme gruvbox

" https://github.com/Shougo/echodoc.vim
" use vim's popup window feature
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'popup'
highlight link EchoDocPopup Pmenu

lua <<EOF
-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
vim.keymap.set('n', 'm', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', 'M', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', '\\e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '\\q', vim.diagnostic.setloclist, opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  local bufopts = { noremap=true, silent=true, buffer=bufnr }
  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
  vim.keymap.set('n', '\\wa', vim.lsp.buf.add_workspace_folder, bufopts)
  vim.keymap.set('n', '\\wr', vim.lsp.buf.remove_workspace_folder, bufopts)
  vim.keymap.set('n', '\\wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, bufopts)
  vim.keymap.set('n', '\\D', vim.lsp.buf.type_definition, bufopts)
  vim.keymap.set('n', '\\rn', vim.lsp.buf.rename, bufopts)
  vim.keymap.set('n', '\\ca', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
  vim.keymap.set('n', '\\f', vim.lsp.buf.formatting, bufopts)
end


null_ls = require("null-ls")
lsp_format = require("lsp-format")

null_ls.setup({
  sources = {
    --null_ls.builtins.formatting.fixjson,
    --null_ls.builtins.completion.spell,
    null_ls.builtins.diagnostics.pylint,
    null_ls.builtins.formatting.isort,
    null_ls.builtins.formatting.black,
  },
  on_attach = function(client, bufnr)
    on_attach(client, bufnr)
    lsp_format.on_attach(client, bufnr)
  end
})

lsp_format.setup {}

lspconfig = require("lspconfig")
lspconfig.pyright.setup{ on_attach = on_attach }

require'nvim-web-devicons'.setup {
 default = true;
}
EOF

" vim:sts=2 sw=2 et:
