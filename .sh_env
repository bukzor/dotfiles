#!/not/executable/bash
# interactive environment that should be shared by bash and zsh
# commands that must be run just once for each new terminal
# generally, this is environment variables
# if your command needs to be run for each new *shell* use ~/.sh_rc
# basics are already handled in .(z)profile, for noninteractive shells

# ensure access to private dotfiles
. ~/.sh_lib/functions.d/has.sh
if has private-dotfiles-check && ! private-dotfiles-check; then
  private-dotfiles-mount
fi

# save/restore our $PATH, so that we can (re-)source this file idempotently
# currently this is the only environment variable we modify (rather than overwrite), but we should do this for all such
if [ -z "$__orig_PATH" ]; then
  export __orig_PATH="$PATH"
else
  PATH="$__orig_PATH"
fi

# extra shell environment for work
. ~/.sh_lib/functions.d/trysource.sh
trysource ~/private-dotfiles/.sh_env

# set PATH so it includes user's personal bin if it exists (or is created)
export PATH=~/.local/bin:~/private-dotfiles/bin:~/bin:"$PATH"
export GOPATH=~/prefix/gopath
export GDK_SCALE=2

export HOMEBREW="$(command -v brew)"
export HOMEBREW_VERBOSE=1
export HOMEBREW_DEVELOPER=1
export HOMEBREW_PREFIX="/opt/homebrew";
export HOMEBREW_CELLAR="$HOMEBREW_PREFIX/Cellar";
export HOMEBREW_REPOSITORY="$HOMEBREW_PREFIX";
export VOLTA_HOME="$HOME/.volta"
export PATH="$VOLTA_HOME/bin:$PATH"
export CLOUDSDK_ROOT_DIR="$HOMEBREW_PREFIX/Caskroom/google-cloud-sdk"
export CLOUDSDK_PYTHON_PREFIX="$CLOUDSDK_ROOT_DIR/latest/google-cloud-sdk/platform/bundledpythonunix"
export CLOUDSDK_PYTHON="$CLOUDSDK_PYTHON_PREFIX/bin/python3"
export CLOUDSDK_PYTHON_SITEPACKAGES=1

homebrew-handle-gnubin
if echo "$OSTYPE" | grep -q '^darwin'; then
  # override crappy macos userspace with homebrew "gnubin"
  export PATH="$HOMEBREW_PREFIX/bin:$HOMEBREW_PREFIX/sbin:$HOMEBREW_PREFIX/libexec/gnubin:$PATH";
  export MANPATH="$HOMEBREW_PREFIX/share/man:$HOMEBREW_PREFIX/libexec/gnuman:$MANPATH";
  export INFOPATH="$HOMEBREW_PREFIX/share/info:$HOMEBREW_PREFIX/libexec/gnuinfo:$INFOPATH";
else # linux
  # append homebrew -- prepending caused too many issues
  # instead of: eval "$("$HOMEBREW" shellenv)"
  export PATH="${PATH+$PATH:}$HOMEBREW_PREFIX/bin:$HOMEBREW_PREFIX/sbin";
  export MANPATH="${MANPATH+$MANPATH:}$HOMEBREW_PREFIX/share/man:";
  export INFOPATH="${INFOPATH+$INFOPATH:}$HOMEBREW_PREFIX/share/info:";
fi

if has nproc; then
  export HOMEBREW_MAKE_JOBS="$(($(nproc) * 3))"
else
  echo "please brew install coreutils" >&2
fi

. ~/.sh_lib/functions.d/bootstamp.sh
export BOOT
BOOT=$(bootstamp)

# bootstrap homebrew deps
#xargs -tr brew install < .config/bukzor-dotfiles/homebrew.list

#MY PREFERENCES ==============================================================
export EDITOR=vim
export VISUAL=$EDITOR
export GIT_EDITOR=$EDITOR
export P4DIFFOPTS="-u --color"
export P4DIFF="~/bin/p4-difftool"
export PYTHONSTARTUP=~/.pythonrc.py

if [ -z "$LANG" ]; then
  export LANG='en_US.UTF-8'
fi

# Set the default Less options.
export LESS='-XFR -i -M -w -z-4'
export PAGER=less
# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Browser
if echo "$OSTYPE" | grep -q '^darwin'; then
  export BROWSER='open'
  export SSH_AUTH_SOCK="$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"

fi

#unmap CTRL-S and CTRL-Q
if tty >/dev/null; then
  stty -ixon -ixoff
fi

psget() {
  column="$1"
  pid="$2"
  ps -o "$column"= -p "$pid" |
    tr -d " "
}

# fix up TERM values
# get the session-leader's parent
terminal="$(psget ppid "$(psget sess $$)")"
if [ "$?" -ne 0 -o -z "$terminal" ]; then
  : refuse the tempation to guess what went wrong
elif [ "$terminal" -gt 0 ]; then
  #use the basename of its arg[0]
  terminal="$(basename "$(head -zn1 /proc/$terminal/cmdline | tr -d '\0')")"
else
  # if our session-leader doesn't have a real parent (pid:0) then we're running as init
  terminal=init
fi
case "$terminal" in
lxterminal|gnome-terminal|xfce4-terminal)
  export TERM=xterm-256color
  ;;
tmux|"tmux: server")
  export TERM=screen-256color
  ;;
init)
  if [ "$TERM" != "linux" ]; then
    echo 'Warning, unknown terminal: "'"$terminal"'" (TERM='"$TERM)" >&2
  fi
  ;;
*)
  if ! echo "$OSTYPE" | grep -q '^darwin' &&
     ! echo "$TERM" | grep -Eq '^(xterm|screen)-256color$'; then
    echo 'Warning, unknown terminal: "'"$terminal"'" (TERM='"$TERM)" >&2
  fi
  ;;
esac

# Further environment
export PREFIX="$(cd "$HOME/../.."; pwd)"
export GEM_HOME=~/prefix/rubygems
export REPO=$HOME/repo

# ask terminfo whether we have a color terminal
# tput is more appropriate for this but harder to use
if infocmp -1GLx | grep -Eq '^\s*(Tc|set_a_foreground|setrgbf)[=,]'; then
  export CLICOLOR=1
  export COLORTERM=1
fi

# My very own python!
activate() { trysource ~/venv/$USER-venv/bin/activate; }
activate

export TMPDIR
# NB: macos date(1) doesn't support -I nor -Id
date="$(date -Idate)"
for TMPDIR in \
    "$TMPDIR" \
    "$PREFIX/tmp/$USER/$BOOT/$date" \
    "/tmp/$USER/$BOOT/$date" \
    "/tmp" \
    "$HOME/tmp/$BOOT/$date" \
    "$HOME/tmp" \
; do
  if [ "$TMPDIR" ]; then
    mkdir -p -m 700 "$TMPDIR" 2>/dev/null
    chmod -f 700 "$TMPDIR"
    if [ -d "$TMPDIR" ] && [ -w "$TMPDIR" ]; then
      break
    fi
  fi
done
unset date

warn() { echo "[1;33mWARNING: [22m$@[0m"; }
if [ "$TMPDIR" ] && [ -d "$TMPDIR" ] && [ -w "$TMPDIR" ]; then
  TMPDIR="$(cd $TMPDIR; pwd)"
else
  unset TMPDIR
  warn 'No writable TMPDIR!' >&2
fi

. ~/.sh_plugins.d/xdg.sh

export PYENV_ROOT="$XDG_CACHE_HOME/pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if has pyenv; then
  eval "$(pyenv init -)"
fi

# added by travis gem
trysource ~/.travis/travis.sh
if has aactivator; then
  eval "$(aactivator init)"
fi

# vim:et:sw=2:sts=2:
